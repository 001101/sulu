<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Bundle\MediaBundle\Entity;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * CollectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionRepository extends NestedTreeRepository implements CollectionRepositoryInterface
{
    /**
     * {@inheritdoc}
     */
    public function findCollectionById($id)
    {
        $result = $this->findCollectionSet($id, 0);

        if(sizeof($result) === 0){
            return null;
        }

        return $result[0];
    }

    /**
     * {@inheritdoc}
     */
    public function findCollectionSet($id, $depth = 0)
    {
        try {
            $sql = sprintf(
                'SELECT n, collectionMeta, collectionType, collectionParent, parentMeta, collectionMedia, collectionChildren
                 FROM %s AS n
                        LEFT JOIN n.meta AS collectionMeta
                        LEFT JOIN n.type AS collectionType
                        LEFT JOIN n.parent AS collectionParent
                        LEFT JOIN n.children AS collectionChildren
                        LEFT JOIN n.media AS collectionMedia
                        LEFT JOIN collectionParent.meta AS parentMeta,
                      %s AS p
                 WHERE n.lft BETWEEN p.lft AND p.rgt
                   AND (n.depth <= p.depth + :maxDepth OR collectionChildren.depth <= :maxDepthPlusOne)
                   AND p.id = :id',
                $this->_entityName,
                $this->_entityName
            );

            $query = new Query($this->_em);
            $query->setDQL($sql);
            $query->setParameter('maxDepth', intval($depth));
            $query->setParameter('maxDepthPlusOne', intval($depth) + 1);
            $query->setParameter('id', $id);
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);

            return $query->getResult();
        } catch (NoResultException $ex) {
            return array();
        }
    }

    /**
     * {@inheritdoc}
     */
    public function findRootCollectionSet($depth = 0)
    {
        try {
            $sql = sprintf(
                'SELECT n, collectionMeta, collectionType, collectionParent, collectionMedia, parentMeta, collectionChildren
                 FROM %s AS n
                        LEFT JOIN n.meta AS collectionMeta
                        LEFT JOIN n.type AS collectionType
                        LEFT JOIN n.parent AS collectionParent
                        LEFT JOIN n.children AS collectionChildren
                        LEFT JOIN n.media AS collectionMedia
                        LEFT JOIN collectionParent.meta AS parentMeta
                 WHERE n.depth <= :maxDepth OR collectionChildren.depth <= :maxDepthPlusOne',
                $this->_entityName,
                $this->_entityName
            );

            $query = new Query($this->_em);
            $query->setDQL($sql);
            $query->setParameter('maxDepth', intval($depth));
            $query->setParameter('maxDepthPlusOne', intval($depth) + 1);
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);

            return $query->getResult();
        } catch (NoResultException $ex) {
            return array();
        }
    }

    /**
     * {@inheritdoc}
     */
    public function findCollections($filter = array(), $limit = null, $offset = null, $sortBy = array())
    {
        list ($parent, $depth, $search) = array(
            isset($filter['parent']) ? $filter['parent'] : null,
            isset($filter['depth']) ? $filter['depth'] : null,
            isset($filter['search']) ? $filter['search'] : null,
        );

        try {
            $qb = $this->createQueryBuilder('collection')
                ->leftJoin('collection.meta', 'collectionMeta')
                ->leftJoin('collection.type', 'type')
                ->leftJoin('collection.parent', 'parent')
                ->leftJoin('collection.children', 'children')
                ->leftJoin('children.media', 'childrenMedia')
                ->leftJoin('collection.media', 'media')
                /*
                ->leftJoin('collection.creator', 'creator')
                ->leftJoin('creator.contact', 'creatorContact')
                ->leftJoin('collection.changer', 'changer')
                ->leftJoin('changer.contact', 'changerContact')
                */
                ->addSelect('collectionMeta')
                ->addSelect('type')
                ->addSelect('parent')
                ->addSelect('children')
                ->addSelect('childrenMedia')
                /*
                ->addSelect('creator')
                ->addSelect('changer')
                ->addSelect('creatorContact')
                ->addSelect('changerContact')
                */
                ->addSelect('media');

            if ($sortBy !== null && is_array($sortBy) && sizeof($sortBy) > 0) {
                foreach ($sortBy as $column => $order) {
                    $qb->addOrderBy('collectionMeta.' . $column, strtolower($order) === 'asc' ? 'ASC' : 'DESC');
                }
            }
            if ($parent !== null) {
                $qb->andWhere('parent.id = :parent');
            }
            if ($depth !== null) {
                $qb->andWhere('collection.depth <= :depth');
            }
            if ($search !== null) {
                $qb->andWhere('collectionMeta.title LIKE :search');
            }
            if ($offset !== null) {
                $qb->setFirstResult($offset);
            }
            if ($limit !== null) {
                $qb->setMaxResults($limit);
            }

            $query = $qb->getQuery();
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
            if ($parent !== null) {
                $query->setParameter('parent', $parent);
            }
            if ($depth !== null) {
                $query->setParameter('depth', intval($depth));
            }
            if ($search !== null) {
                $query->setParameter('search', '%'.$search.'%');
            }

            return new Paginator($query);
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function findCollectionBreadcrumbById($id)
    {
        try {
            $sql = sprintf(
                'SELECT n, collectionMeta
                 FROM %s AS p,
                      %s AS n
                        LEFT JOIN n.meta AS collectionMeta
                 WHERE p.id = :id AND p.lft > n.lft AND p.rgt < n.rgt
                 ORDER BY n.lft',
                $this->_entityName,
                $this->_entityName
            );

            $query = new Query($this->_em);
            $query->setDQL($sql);
            $query->setParameter('id', $id);

            return $query->getResult();
        } catch (NoResultException $ex) {
            return array();
        }
    }
}
